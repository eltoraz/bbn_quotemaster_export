# qmexport.py - module for migrating BBN data generated by Quote Master
#  to CSV format usable by Epicor ERP's DMT
import os

from qmexport import config, load_data, write_data

from qmexport.part import Part
from qmexport.material import Material
from qmexport.operation import Operation

from qmexport.map_data import map_part, map_bom, map_boo, map_rev

# TODO: revision dict

# get the data
# for now, by opening a CSV of the result set of the queries
part_filename = config.qualified_filename('part')
bom_filename = config.qualified_filename('bill of materials')
boo_filename = config.qualified_filename('bill of operations')

part_data = load_data.import_data('csv', part_filename)
bom_data = load_data.import_data('csv', bom_filename)
boo_data = load_data.import_data('csv', boo_filename)

# map QM values to fields expected by DMT, scrubbing & 
#  reformatting as necessary
dmt_part_data = map_part.map_part(part_data)

# import part revisions (if they exist) for use in BOM/BOO
part_rev_filename = config.qualified_filename('part revision')
rev_dict = {}
if os.path.isfile(part_rev_filename):
    rev_data = load_data.import_data('csv', part_rev_filename)
    rev_dict = map_rev.map_rev(rev_data)
    map_rev.update_parts(dmt_part_data, rev_dict)

dmt_bom_data = map_bom.map_bom(bom_data, rev_dict)
dmt_boo_data = map_boo.map_boo(boo_data, rev_dict)

# export the Epicor-friendly data
write_data.write_csv(Part.expected_fields,
                     dmt_part_data,
                     config.output_path+'part_ALL.csv')

write_data.write_csv(config.part_header.split(','),
                     dmt_part_data,
                     config.output_path+'part.csv')
write_data.write_csv(config.part_plant_header.split(','),
                     dmt_part_data,
                     config.output_path+'part_plant.csv')
write_data.write_csv(config.part_rev_header.split(','),
                     dmt_part_data,
                     config.output_path+'part_rev.csv')

write_data.write_csv(Material.expected_fields,
                     [row for key in dmt_bom_data for row in dmt_bom_data[key]],
                     config.output_path+'bom.csv')
write_data.write_csv(Operation.expected_fields,
                     [row for key in dmt_boo_data for row in dmt_boo_data[key]],
                     config.output_path+'boo.csv')

# --- DEBUGGING ---
print('---PART---')
print('Raw part entries:', len(part_data))
print(part_data[0])

test_single_pn = 'AT11'

print('---PART (DMT)---')
print('Processed part entries:', len(dmt_part_data))
print(dmt_part_data[test_single_pn])

print('---BOM (DMT)---')
print('BOM entries:', len(dmt_bom_data))
print(dmt_bom_data[test_single_pn])

print('---BOO (DMT)---')
print('BOO entries:', len(dmt_boo_data))
print(dmt_boo_data[test_single_pn])

# write files to test output data in DMT
test_single_bom = [row for row in dmt_bom_data[test_single_pn]]
test_single_boo = [row for row in dmt_boo_data[test_single_pn]]

test_single_part = {row.__dict__['MtlPartNum']: dmt_part_data[row.__dict__['MtlPartNum']] for row in test_single_bom}
test_single_part[test_single_pn] = dmt_part_data[test_single_pn]

write_data.write_csv(config.part_header.split(','),
                     test_single_part,
                     config.output_path+'TEST_1part.csv')
write_data.write_csv(config.part_plant_header.split(','),
                     test_single_part,
                     config.output_path+'TEST_2part_plant.csv')
write_data.write_csv(config.part_rev_header.split(','),
                     test_single_part,
                     config.output_path+'TEST_3part_rev.csv')
write_data.write_csv(Material.expected_fields,
                     test_single_bom,
                     config.output_path+'TEST_4bom.csv')
write_data.write_csv(Operation.expected_fields,
                     test_single_boo,
                     config.output_path+'TEST_5boo.csv')
