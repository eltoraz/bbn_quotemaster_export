# qmexport.py - module for migrating BBN data generated by Quote Master
#  to CSV format usable by Epicor ERP's DMT
import os

from qmexport import config, load_data, write_data

from qmexport.part import Part
from qmexport.material import Material
from qmexport.operation import Operation

from qmexport.map_data import map_part, map_bom, map_boo, map_rev

def debug(test_single_pn):
    """Print info about the data structures for debugging
    """
    # --- DEBUGGING ---
    print('---PART---')
    print('Raw part entries:', len(part_data))
    print(part_data[0])

    print('---PART (DMT)---')
    print('Processed part entries:', len(dmt_part_data))
    print(dmt_part_data[test_single_pn])

    print('---BOM (DMT)---')
    print('BOM entries:', len(dmt_bom_data))
    print(dmt_bom_data[test_single_pn])

    print('---BOO (DMT)---')
    print('BOO entries:', len(dmt_boo_data))
    print(dmt_boo_data[test_single_pn])

    print('---MISSING PARTS REFERENCED IN BOM---')
    missing_parts = set()
    for row in dmt_bom_data:
        for mat in dmt_bom_data[row]:
            pn = mat.__dict__['PartNum']
            mn = mat.__dict__['MtlPartNum']
            if pn not in dmt_part_data:
                missing_parts = set.union(missing_parts, {pn})
            if mn not in dmt_part_data:
                missing_parts = set.union(missing_parts, {mn})
    print(len(missing_parts), 'orphaned parts:')
    print(missing_parts)

def resolve_bom(data, pn):
    """Recurse over the rows in `data` belonging to part `pn` and
    return a list containing all its dependent materials
    """
    header = 'MtlPartNum'
    if pn in data:
        master_list = data[pn]
        working_list = []
        for row in master_list:
            working_list += resolve_bom(data, row.__dict__[header])
        return master_list + working_list
    else:
        return []

def resolve_boo(data, bom):
    """Return a list of Operation objects corresponding to the hierarchy
    of materials in the given BOM
    """
    working_list = []
    for row in bom:
        pn = row.__dict__['PartNum']
        if pn in data:
            working_list += data[pn]

    return working_list

def resolve_part_list(data, bom):
    """Return a dict of part numbers to Part objects for the given
    Bill of Materials (input as a list of Material objects); and
    a set of parts not in the part list
    """
    working_part_list = {}
    for mat in bom:
        pn = mat.__dict__['PartNum']
        mn = mat.__dict__['MtlPartNum']
        working_part_list[pn] = data[pn]
        working_part_list[mn] = data[mn]

    return working_part_list

def dmt_test(test_single_pn, test_complex_pn):
    """Generate short CSV files to test program output with DMT
    """
    # single-layer part w/ associated BOM & BOO
    test_single_bom = resolve_bom(dmt_bom_data, test_single_pn)
    test_single_boo = resolve_boo(dmt_boo_data, test_single_bom)

    test_single_part_list = resolve_part_list(dmt_part_data, test_single_bom)

    write_data.write_csv(Part.expected_fields,
                         test_single_part_list,
                         config.output_path+'TEST_Apart_ALL.csv')
    write_data.write_csv(config.part_header.split(','),
                         test_single_part_list,
                         config.output_path+'TEST_1part.csv')
    write_data.write_csv(config.part_plant_header.split(','),
                         test_single_part_list,
                         config.output_path+'TEST_2part_plant.csv')
    write_data.write_csv(config.part_rev_header.split(','),
                         test_single_part_list,
                         config.output_path+'TEST_3part_rev.csv')
    write_data.write_csv(Material.expected_fields,
                         test_single_bom,
                         config.output_path+'TEST_4bom.csv')
    write_data.write_csv(Operation.expected_fields,
                         test_single_boo,
                         config.output_path+'TEST_5boo.csv')

    # multi-layer part w/ associated BOM & BOO
    test_complex_bom = resolve_bom(dmt_bom_data, test_complex_pn)
    test_complex_boo = resolve_boo(dmt_boo_data, test_complex_bom)
    test_complex_part_list = resolve_part_list(dmt_part_data, test_complex_bom)

    write_data.write_csv(Part.expected_fields,
                         test_complex_part_list,
                         config.output_path+'TEST_Bpart_ALL.csv')
    write_data.write_csv(config.part_header.split(','),
                         test_complex_part_list,
                         config.output_path+'TEST_6part.csv')
    write_data.write_csv(config.part_plant_header.split(','),
                         test_complex_part_list,
                         config.output_path+'TEST_7part_plant.csv')
    write_data.write_csv(config.part_rev_header.split(','),
                         test_complex_part_list,
                         config.output_path+'TEST_8part_rev.csv')
    write_data.write_csv(Material.expected_fields,
                         test_complex_bom,
                         config.output_path+'TEST_9bom.csv')
    write_data.write_csv(Operation.expected_fields,
                         test_complex_boo,
                         config.output_path+'TEST_10boo.csv')

# get the data
# for now, by opening a CSV of the result set of the queries
part_filename = config.qualified_filename('part')
bom_filename = config.qualified_filename('bill of materials')
boo_filename = config.qualified_filename('bill of operations')

part_data = load_data.import_data('csv', part_filename)
bom_data = load_data.import_data('csv', bom_filename)
boo_data = load_data.import_data('csv', boo_filename)

# map QM values to fields expected by DMT, scrubbing & 
#  reformatting as necessary
dmt_part_data = map_part.map_part(part_data)

# import part revisions (if they exist) for use in BOM/BOO
part_rev_filename = config.qualified_filename('part revision')
rev_dict = {}
if os.path.isfile(part_rev_filename):
    rev_data = load_data.import_data('csv', part_rev_filename)
    rev_dict = map_rev.map_rev(rev_data)
    map_rev.update_parts(dmt_part_data, rev_dict)

dmt_bom_data = map_bom.map_bom(bom_data, rev_dict)
dmt_boo_data = map_boo.map_boo(boo_data, rev_dict)

# export the Epicor-friendly data
write_data.write_csv(Part.expected_fields,
                     dmt_part_data,
                     config.output_path+'part_ALL.csv')

write_data.write_csv(config.part_header.split(','),
                     dmt_part_data,
                     config.output_path+'part.csv')
write_data.write_csv(config.part_plant_header.split(','),
                     dmt_part_data,
                     config.output_path+'part_plant.csv')
write_data.write_csv(config.part_rev_header.split(','),
                     dmt_part_data,
                     config.output_path+'part_rev.csv')

write_data.write_csv(Material.expected_fields,
                     [row for key in dmt_bom_data for row in dmt_bom_data[key]],
                     config.output_path+'bom.csv')
write_data.write_csv(Operation.expected_fields,
                     [row for key in dmt_boo_data for row in dmt_boo_data[key]],
                     config.output_path+'boo.csv')

test_single_pn = 'AT11'
test_complex_pn = 'Y2233L-095-O-FRAME LF'
debug(test_single_pn)
dmt_test(test_single_pn, test_complex_pn)
