# qmexport.py - module for migrating BBN data generated by Quote Master
#  to CSV format usable by Epicor ERP's DMT
from qmexport import config, load_data, map_data, write_data

# get the data
# for now, by opening a CSV of the result set of the queries
part_filename = config.qualified_filename('part')
part_price_filename = config.qualified_filename('part price')
part_rev_filename = config.qualified_filename('part revision')

part_data = load_data.qm_read(format='csv', filename=part_filename)
part_price_data = load_data.qm_read(format='csv', filename=part_price_filename)
part_rev_data = load_data.qm_read(format='csv', filename=part_rev_filename)

# map QM values to fields expected by DMT, scrubbing & 
#  reformatting as necessary
dmt_part_data = map_data.map_part(part_data)
dmt_price_data = map_data.map_part_prices(part_price_data)
dmt_plant_data = map_data.map_part_plant(part_data)
dmt_rev_data = map_data.map_part_rev(part_rev_data)

# export the Epicor-friendly data
write_data.write_csv(config.part_header.split(','),
                     dmt_part_data,
                     config.output_path+'part.csv')
write_data.write_csv(config.part_price_header.split(','),
                     dmt_price_data,
                     config.output_path+'part_prices.csv')
write_data.write_csv(config.part_plant_header.split(','),
                     dmt_plant_data,
                     config.output_path+'part_plant.csv')
write_data.write_csv(config.part_rev_header.split(','),
                     dmt_rev_data,
                     config.output_path+'part_rev.csv')



# debugging info
print('---PART---')
print(len(part_data))
print(part_data[0])

print('---PART (DMT)---')
print(len(dmt_part_data))
print(dmt_part_data[0])

print('---PART PRICE (DMT)---')
print(len(dmt_price_data))
print(dmt_price_data[0])

print('---PART PLANT (DMT)---')
print(len(dmt_plant_data))
print(dmt_plant_data[0])

print('---PART REV (DMT)---')
print(len(dmt_rev_data))
print(dmt_rev_data[435])

print('')

counts = {}
for i in dmt_part_data:
    counts[i['ClassID']] = counts.get(i['ClassID'], 0) + 1
print('ClassID breakdown:', counts)

asbl_counts = {'1': 0, '0': 0}
for i in part_data:
    asbl_counts[i['NRCCPrint']] += 1
print('Assembly count:', asbl_counts)
